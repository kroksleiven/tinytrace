* ------------------------------------------------------------------------------
*
* OVERALL OBJECTIVE
*
* ------------------------------------------------------------------------------

Create a simple and light weight library for tracing (and debugging) C/C++ source
code. The library shall ble flexible eoungh to be used on embedded platforms with
a wide range of available resources (processing power, memory, etc.), with only
minor modifications.

* ------------------------------------------------------------------------------
*
* SOFTWARE REQUIREMENTS SPECIFICATION (SRS)
*
* ------------------------------------------------------------------------------

Section 1 - General and non-functional requirements
---------------------------------------------------

* The trace library shall have minmal impact to size and timing of the existing
source code.

* The library shall support: Win32, POSIX (Linux, VxW) and "bare metal" code.

Section 2 - Tracing and logging
-------------------------------

* It shall be possible to trace all types of functions, including ISRs and other
low-level functions where print-statements are not available, or will impact
timing significantly.

* It shall be possible to trace:
    - Sequence of code executed (e.g. line number, address, or similar)
    - Values of variables

* Trace points shall be inserted in existing source code using simple macros.

* It shall be possible to switch off tracing with one central #define (in one
file). When tracing is turned off, the inserted trace points shall have _no
impact_ on the source code being debugged.

* If shall be possible to print all traces to the console (if available).

Section 3 - Data analysis
-------------------------

* The following data sources shall be supported as input to the analysis tools:
    - text (e.g. printout from console)
    - binary data (e.d. miniDmp, .dmp)

* The analysis tools shall show the sequence of hit trace points, and the value
of logged variables.

* ------------------------------------------------------------------------------
*
*  SOFTWARE DESIGN DESCRIPTION (SDD)
*
* ------------------------------------------------------------------------------

Section 1 - General
--------------------------------------------------------------------------------

Two files (.h and .c) will include all declarations and code. The header file
forward declares all macros, types and functions required for applicaion TLUs.

Configuration is don by modification of simple #defines in tinytrace.h.
The configuration is common for all TLUs which include the library.

Coonfiguration properties:

	#define TOTAL_MEMORY_BYTES 100000

	#define TIME_STAMP	1
	#define FILE NAME	1
	#define LINE_NUMBER	1

Section 2 - Tracing and logging
-------------------------------

Macros available for the application code (examples only):

...

l				Add trace to buffer (no logging)
_l (*entry)		Decode & print

ls ("str")		Trace & log string
_ls (*entry)	Decode & print

li (int)		Trace & log int
_li (*entry)	Decode & print

lri (int)		Trace & log int, and return (the same int). Used e.g. for arguments to function calls.
_lri (*entry)	Decode & print

...

Section 3 - Data model
----------------------

All traced locations and logged values are written to the same global buffer,
allocated on startup (statically).

During initialization the data is zeroed.

The buffer is a ring-buffer.

Data format:

	MAGIC NUMBER (16B)
	
	Easy identifiable number to be used when searching for the buffer contents
	in a memory dump file or similar.
	
	"Abraham Lincoln" = 4162726168616d204c696e636f6c6e00

	BUFFER SIZE [4B]
	
	Total buffer size (including magic number)

	LOG POINTER [4B]
	
	Location of last, valid trace valid in wrap-around buffer.

	SEQUENCE DATA [xB]

	Entry format:
	-  MACRO [1B]   ID of the macro which was used to code the entry data. Required for decoding.
	-  TRACE [4B]   Return address for function (e.g.) Backtrace)
	-  DATA [xB]    Logged values

	Example:
	... MACRO TRACE DATA   MACRO TRACE DATA   MACRO TRACE DATA ...

	CRC [1B]
	
	CRC of last entry added to buffer. Indicates if the last entry was written successfully to the buffer.

Section 4 - Analysis
--------------------

The analysis tool shall accept the following inputs:
	- Binary (e.g. a memory dump file)
	- Text (e.g. copied from a console/terminal screen)